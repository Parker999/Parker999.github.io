<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxtrix</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-18T08:12:24.083Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Parker Shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>backtracking part1</title>
    <link href="http://example.com/2022/05/18/backtracking/"/>
    <id>http://example.com/2022/05/18/backtracking/</id>
    <published>2022-05-18T08:11:05.000Z</published>
    <updated>2022-05-18T08:12:24.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="backtracking-Part1-combination-problem"><a href="#backtracking-Part1-combination-problem" class="headerlink" title="backtracking Part1 combination problem"></a>backtracking Part1 combination problem</h1><ul><li>leetcode <a href="https://leetcode.com/problems/combinations/">77</a></li><li>this problem need to find all combination between [1,n] in k size</li><li>clue : if k is small number we can just use k times for loop. However, k is is not fixed and k could be large, so we need to use backtracking. </li><li>For example, if n=4, k=2, we need to pick two number from [1,4], we can pick 1 from [1,4], then we can pick 2 from [2,4]. It’s like tree, from root is the [1,2,3,4], then the left most root is [2,3,4] since we picked 1,<br>the second middle root is [3,4] since we picked 2, right root is [4] since we picked 3, in the next level, we need to pick the number from the root until the root is empty.</li><li>in backtracking, it would be better to have global container, it will add readibility to our code</li><li>for this problem, the result is vector&lt; vector&lt; int&gt;&gt;, also we need a vector<int> to store our tmp partial solution</li><li>in our backtracking function, we need to determine which number we begin to loop, so we need startindex as our parameter <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void backtracking(int startindex, int n, int k)&#123;</span><br><span class="line">    if(exit condition)&#123;</span><br><span class="line">        result.push_back(partial_result);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>the exit condition is when we begin to add the k size vector<int> to our final result, so the exit condition should be <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partial_result.size()==k;</span><br></pre></td></tr></table></figure></li><li>to dealing with our main part of backtracking function, I said I need to borrow the extra parameter startindex<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i=startindex;i&lt;n;i++)&#123;</span><br><span class="line">    partial_result.push_back(i);</span><br><span class="line">    backtracking(i+1,n,k);</span><br><span class="line">    partial_result.pop_back(); // this the soul of the backtracking problem </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>then we just need to call this function in our main function<br>the complete code is in below<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; res;</span><br><span class="line">        vector&lt;int&gt; path;</span><br><span class="line">    void backtracking(int startidex,int n, int k)&#123;</span><br><span class="line">        if(path.size()==k)</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(path);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //for(int i=startidex;i&lt;=n;i++)&#123;    </span><br><span class="line">        for(int i= startidex;i&lt;=n-(k-path.size())+1;i++)&#123; </span><br><span class="line">            path.push_back(i);</span><br><span class="line">            backtracking(i+1,n,k);</span><br><span class="line">            path.pop_back(); // correspond to push </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) &#123;</span><br><span class="line">        backtracking(1,n,k);</span><br><span class="line">        return res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>you might feel curious about my loop condition, why it change to n-(k-path.size())+1, since our partial result couldn’t larger than k size, thus, we can adjust our ending condition to do some prunning operation, it can save some memeory</li><li>if path.size()==0, then n=4,k=2 n-(k-path.size()+1)=4-2+1=3,you might think if startindex is 3, how can I add 4, path.size() will change, if it becomes 1, then n-(k-path.size()+1)= 4-1+1=4</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;backtracking-Part1-combination-problem&quot;&gt;&lt;a href=&quot;#backtracking-Part1-combination-problem&quot; class=&quot;headerlink&quot; title=&quot;backtracking Par</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>do you love fishing?</title>
    <link href="http://example.com/2022/04/29/first-post/"/>
    <id>http://example.com/2022/04/29/first-post/</id>
    <published>2022-04-29T15:52:29.000Z</published>
    <updated>2022-05-17T00:13:41.008Z</updated>
    
    
    
    
    
    <category term="fishing" scheme="http://example.com/tags/fishing/"/>
    
  </entry>
  
  <entry>
    <title>free talk</title>
    <link href="http://example.com/2022/04/29/hello-world/"/>
    <id>http://example.com/2022/04/29/hello-world/</id>
    <published>2022-04-29T12:30:40.685Z</published>
    <updated>2022-05-17T00:11:54.906Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
